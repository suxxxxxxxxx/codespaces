{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createStore } from 'vuex';\nimport axios from 'axios';\n//仓库里面没有生命周期\n\nexport default createStore({\n  state() {\n    //全局数据源,全局的data  官方建议改成函数，而不是对象   安装是4.0\n    return {\n      questionList: [],\n      itemNum: 1,\n      //默认是第一题 \n      answerId: [] //存放选中的答案ID,仓库的数据源仓库负责修改它\n    };\n  },\n  getters: {\n    // computed 计算属性 和computed一样 有一个默认的state\n    rightAnswer(state) {\n      let arr = [];\n      for (let key of state.questionList) {\n        for (let answer of key.topic_answer) {\n          if (answer.is_standard_answer) {\n            arr.push(answer.topic_answer_id);\n          }\n        }\n      }\n      return arr;\n    }\n  },\n  mutations: {\n    //methods 方法 同步的方式修改数据源 用来定义方法，用于修改仓库的数据，以同步的方式去执行，写在里面的方法一定有一个state参数，代表数据源\n    getQuestionList(state, list) {\n      state.questionList = list;\n    },\n    //其实类似I/O方法\n    recordAnswer(state, id) {\n      state.answerId.push(id);\n    },\n    nextItem(state) {\n      //变成下一题\n      state.itemNum += 1;\n    }\n  },\n  actions: {\n    //async methods 放异步方法 mutations里面的方法能被actions访问到\n    recordAnswerAction({\n      commit,\n      state\n    }, id) {\n      commit('recordAnswer', id); //提交一首,触发\n      if (state.itemNum < state.questionList.length) {\n        commit('nextItem');\n      }\n    },\n    getQuestionListAction({\n      commit\n    }) {\n      //context 代表整个store、 写成{commit}不写context 这叫解构 在下面直接用commit\n      axios.get('https://www.fastmock.site/mock/3a33c631bcba043a378b4ceafbf994b8/question/fri').then(function (response) {\n        console.log(response);\n        console.log(response.data[0].topic_name);\n        console.log(response.data[0].topic_answer[0].answer_name);\n\n        //触发mutations里面的getQuestionList   要先提交使用context.commit  第一个为调用的方法名，第二个为传的参数\n        // context.commit(\"getQuestionList\",response.data)\n        commit(\"getQuestionList\", response.data);\n      }).catch(function (error) {\n        console.log(error);\n      }).finally(function () {});\n    }\n  },\n  modules: {//模块化\n  }\n});","map":{"version":3,"names":["createStore","axios","state","questionList","itemNum","answerId","getters","rightAnswer","arr","key","answer","topic_answer","is_standard_answer","push","topic_answer_id","mutations","getQuestionList","list","recordAnswer","id","nextItem","actions","recordAnswerAction","commit","length","getQuestionListAction","get","then","response","console","log","data","topic_name","answer_name","catch","error","finally","modules"],"sources":["D:/codespace/vue/question-naire/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\nimport axios from 'axios'\n//仓库里面没有生命周期\n\nexport default createStore({\n  state() {//全局数据源,全局的data  官方建议改成函数，而不是对象   安装是4.0\n    return {\n      questionList: [],\n      itemNum: 1,//默认是第一题 \n      answerId: []//存放选中的答案ID,仓库的数据源仓库负责修改它\n    }\n\n  },\n  getters: {// computed 计算属性 和computed一样 有一个默认的state\n    rightAnswer(state){\n      let arr = []\n      for(let key of state.questionList){\n        for(let answer of key.topic_answer)\n        {\n          if(answer.is_standard_answer)\n          {\n            arr.push(answer.topic_answer_id)\n          }\n        }\n      }\n      return arr\n    }\n  },\n  mutations: {//methods 方法 同步的方式修改数据源 用来定义方法，用于修改仓库的数据，以同步的方式去执行，写在里面的方法一定有一个state参数，代表数据源\n    getQuestionList(state, list) {\n      state.questionList = list\n    },\n\n    //其实类似I/O方法\n    recordAnswer(state, id) {\n      state.answerId.push(id)\n    },\n    nextItem(state) {\n      //变成下一题\n      state.itemNum+=1\n    },\n  },\n  actions: { //async methods 放异步方法 mutations里面的方法能被actions访问到\n    recordAnswerAction({commit,state},id) {\n      commit('recordAnswer',id)//提交一首,触发\n      if(state.itemNum<state.questionList.length)\n      {\n        commit('nextItem')\n      }\n     \n    },\n   \n    getQuestionListAction({ commit }) {//context 代表整个store、 写成{commit}不写context 这叫解构 在下面直接用commit\n      axios.get('https://www.fastmock.site/mock/3a33c631bcba043a378b4ceafbf994b8/question/fri')\n        .then(function (response) {\n          console.log(response);\n          console.log(response.data[0].topic_name);\n          console.log(response.data[0].topic_answer[0].answer_name);\n\n          //触发mutations里面的getQuestionList   要先提交使用context.commit  第一个为调用的方法名，第二个为传的参数\n          // context.commit(\"getQuestionList\",response.data)\n          commit(\"getQuestionList\", response.data)\n\n        })\n        .catch(function (error) {\n          console.log(error);\n        })\n        .finally(function () {\n\n        })\n    }\n  },\n  modules: {//模块化\n  }\n})\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB;;AAEA,eAAeD,WAAW,CAAC;EACzBE,KAAKA,CAAA,EAAG;IAAC;IACP,OAAO;MACLC,YAAY,EAAE,EAAE;MAChBC,OAAO,EAAE,CAAC;MAAC;MACXC,QAAQ,EAAE,EAAE;IACd,CAAC;EAEH,CAAC;EACDC,OAAO,EAAE;IAAC;IACRC,WAAWA,CAACL,KAAK,EAAC;MAChB,IAAIM,GAAG,GAAG,EAAE;MACZ,KAAI,IAAIC,GAAG,IAAIP,KAAK,CAACC,YAAY,EAAC;QAChC,KAAI,IAAIO,MAAM,IAAID,GAAG,CAACE,YAAY,EAClC;UACE,IAAGD,MAAM,CAACE,kBAAkB,EAC5B;YACEJ,GAAG,CAACK,IAAI,CAACH,MAAM,CAACI,eAAe,CAAC;UAClC;QACF;MACF;MACA,OAAON,GAAG;IACZ;EACF,CAAC;EACDO,SAAS,EAAE;IAAC;IACVC,eAAeA,CAACd,KAAK,EAAEe,IAAI,EAAE;MAC3Bf,KAAK,CAACC,YAAY,GAAGc,IAAI;IAC3B,CAAC;IAED;IACAC,YAAYA,CAAChB,KAAK,EAAEiB,EAAE,EAAE;MACtBjB,KAAK,CAACG,QAAQ,CAACQ,IAAI,CAACM,EAAE,CAAC;IACzB,CAAC;IACDC,QAAQA,CAAClB,KAAK,EAAE;MACd;MACAA,KAAK,CAACE,OAAO,IAAE,CAAC;IAClB;EACF,CAAC;EACDiB,OAAO,EAAE;IAAE;IACTC,kBAAkBA,CAAC;MAACC,MAAM;MAACrB;IAAK,CAAC,EAACiB,EAAE,EAAE;MACpCI,MAAM,CAAC,cAAc,EAACJ,EAAE,CAAC;MACzB,IAAGjB,KAAK,CAACE,OAAO,GAACF,KAAK,CAACC,YAAY,CAACqB,MAAM,EAC1C;QACED,MAAM,CAAC,UAAU,CAAC;MACpB;IAEF,CAAC;IAEDE,qBAAqBA,CAAC;MAAEF;IAAO,CAAC,EAAE;MAAC;MACjCtB,KAAK,CAACyB,GAAG,CAAC,8EAA8E,CAAC,CACtFC,IAAI,CAAC,UAAUC,QAAQ,EAAE;QACxBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;QACrBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAACC,UAAU,CAAC;QACxCH,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAACpB,YAAY,CAAC,CAAC,CAAC,CAACsB,WAAW,CAAC;;QAEzD;QACA;QACAV,MAAM,CAAC,iBAAiB,EAAEK,QAAQ,CAACG,IAAI,CAAC;MAE1C,CAAC,CAAC,CACDG,KAAK,CAAC,UAAUC,KAAK,EAAE;QACtBN,OAAO,CAACC,GAAG,CAACK,KAAK,CAAC;MACpB,CAAC,CAAC,CACDC,OAAO,CAAC,YAAY,CAErB,CAAC,CAAC;IACN;EACF,CAAC;EACDC,OAAO,EAAE,CAAC;EAAA;AAEZ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}